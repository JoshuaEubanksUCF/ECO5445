knitr::opts_chunk$set(echo = TRUE)
women$weight
fitted(fit)
knitr::opts_chunk$set(echo = TRUE)
summary(women)
fit <- lm(weight ~ height, data = women)
summary(fit)
fitted(fit)
residuals(fit)
plot(women$height, women$weight, main = "Women Age 30-39",
xlab = "Height (in inches)", ylab = "Weight (in pounds)")
abline(fit) # Add the line of best fit.
fit2 <- lm(weight ~ height + I(height^2), data = women)
summary(fit2)
library(car)
install.packages(c('car', 'gvlma', 'MASS', 'leaps'))
fitted(fit2)
plot(women$height, women$weight, main = "Women Age 30-39",
xlab = "Height (in inches)", ylab = "Weight (in lbs)")
lines(women$height, fitted(fit2))
library(car)
scatterplot(weight ~ height, data = women, spread = FALSE,
lty.smooth = 2, pch = 19, main = "Women Age 30-39", xlab = "Height (inches)",
ylab = "Weight (lbs.)")
states <- as.data.frame(state.x77[, c("Murder", "Population",
"Illiteracy", "Income", "Frost")])
View(states)
help(states)
help(state)
help(state.x77)
scatterplotMatrix(states, spread = FALSE, lty.smooth = 2,
main = "Scatterplot Matrix")
cor(states)
cor(states)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# If you want to include all variables, the shorthand is
fit <- lm(Murder ~., data = states)
View(fit)
summary(fit)
library(effects)
install.packages("effects")
library(effects)
plot(effect("hp:wt", fit, list(wt = c(2.2, 3.2, 4.2))), multiline = TRUE)
confint(fit)
fit <- lm(weight ~ height, data = women)
plot(fit)
par(mfrow = c(2, 2))
plot(fit)
newfit <- lm(weight ~ height + I(height^2), data = women)
par(mfrow = c(2, 2))
plot(newfit)
par(opar)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
opar <- par(no.readonly = TRUE)
newfit <- lm(weight ~ height + I(height^2), data = women)
par(mfrow = c(2, 2))
plot(newfit)
par(opar)
newfit <- lm(weight ~ height + I(height^2), data = women[-c(13, 15),])
par(mfrow = c(2, 2))
plot(newfit)
par(opar)
fit <- lm(Murder ~ Population + Illiteracy + Income +
Frost, data = states)
par(mfrow = c(2, 2))
plot(fit)
par(opar)
library(car)
fit <- lm(Murder ~ Population + Illiteracy + Income +
Frost, data = states)
qqPlot(fit, labels = FALSE, simulate = TRUE, main = "Q-Q Plot")
residplot <- function(fit, nbreaks=10) {
z <- rstudent(fit)
hist(z, breaks=nbreaks, freq=FALSE,
xlab="Studentized Residual",
main="Distribution of Errors")
rug(jitter(z), col="brown")
curve(dnorm(x, mean=mean(z), sd=sd(z)),
add=TRUE, col="blue", lwd=2)
lines(density(z)$x, density(z)$y,
col="red", lwd=2, lty=2)
legend("topright",
legend = c( "Normal Curve", "Kernel Density Curve"),
lty=1:2, col=c("blue","red"), cex=.7)
}
residplot(fit)
durbinWatsonTest(fit)
crPlots(fit, one.page = TRUE, ask = FALSE)
ncvTest(fit)
spreadLevelPlot(fit)
library(gvlma)
fit <- lm(Murder ~ Population + Illiteracy + Income +
Frost, data = states)
gvmodel <- gvlma(fit)
summary(gvmodel)
vif(fit)
sqrt(vif(fit)) > 2
library(car)
outlierTest(fit)
hat.plot <- function(fit){
p <- length(coefficients(fit))
n <- length(fitted(fit))
plot(hatvalues(fit), main = "Index Plot of Hat Values")
abline(h = c(2, 3) * p/n, col = "red", lty = 2)
identify(1:n, hatvalues(fit), names(hatvalues(fit)))
}
hat.plot(fit)
plot(fit, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
cutoff <- 4/(nrow(states) - length(fit$coefficients) - 2)
plot(fit, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
avPlots(fit, ask = FALSE, onepage = TRUE, id.method = "identify")
influencePlot(fit, id.method = "identify", main = "Influence Plot",
sub = "Circle size is proportial to Cook's Distance")
library(car)
summary(powerTransform(states$Murder))
library(car)
boxTidwell(Murder ~ Population + Illiteracy, data = states)
library(MASS)
fit1 <- lm(Murder ~ Population + Illiteracy + Income +
Frost, data = states)
stepAIC(fit, direction = "backward")
library(leaps)
leaps <- regsubsets(Murder ~ Population + Illiteracy +
Income + Frost, data = states, nbest = 4)
plot(leaps, scale = "adjr2")
library(car)
subsets(leaps, statistic = "cp",
main = "Cp Plot for All Subsets Regression")
zstates <- as.data.frame(scale(states))
zfit <- lm(Murder ~ Population + Income + Illiteracy +
Frost, data = zstates)
coef(zfit)
?predict
View(states)
newState <- data.frame("Murder" = 13.9,
"Population" = 813,
"Illiteracy" = 1.3,
"Income"= 5107,
"Frost" = 60)
predict(fit, newState)
newState <- data.frame("Population" = 813,
"Illiteracy" = 1.3,
"Income"= 5107,
"Frost" = 60)
predict(fit, newState)
newState <- data.frame("Population" = 813,
"Illiteracy" = 1.3,
"Income"= 5107,
"Frost" = 60)
predict(fit, newState)
knitr::opts_chunk$set(echo = TRUE)
plot(sales,price)
oj <- read.csv("oj.csv")
head(oj)
levels(oj$brand)
plot(oj$sales,oj$price,col = oj$brand)
install.packages("plotly")
library(plotly)
plot_ly(oj, y = ~price, x = ~sales, type = 'scatter',color = ~brand)
plot_ly(y = starwars$price,x= ~brand, type = 'box', name = 'Height [cm]',text = starwars$name)
plot_ly(y = oj$price,x= oj$brand, type = 'box', name = 'Height [cm]',text = starwars$name)
plot_ly(y = oj$price,x= oj$brand, type = 'box', name = 'Height [cm]')
oj$logPrice <- log(oj$price)
oj$logSales <- log(oj$sales)
plot_ly(oj, y = ~logPrice, x = ~logSales, type = 'scatter',color = ~brand)
plot_ly(y = oj$logPrice,x= oj$brand, type = 'box', name = 'Height [cm]')
brandcol <- c("green","red","gold")
par(mfrow=c(1,2))
plot(log(price) ~ brand, data=oj, col=brandcol)
brandcol <- c("green","red","gold")
par(mfrow=c(1,2))
plot(log(price) ~ brand, data=oj, col=brandcol)
plot(logPrice ~ brand, data=oj, col=brandcol)
reg = glm(log(sales) ~ log(price) + brand, data=oj)
summary(reg) ## coef, tests, fit
coef(reg) ## just coefficients
x <- model.matrix( ~ log(price) + brand, data=oj)
View(x)
x[c(100,200,300),]
oj[c(100,200,300),]
beta <- coef(reg)
plot(log(sales) ~ log(price), data=oj, col=brandcol[oj$brand],
cex=.1, pch=20, bty="n")
abline(a=beta[1], b=beta[2], col=brandcol[1], lwd=2)
abline(a=beta[1]+beta[3], b=beta[2], col=brandcol[2], lwd=2)
abline(a=beta[1]+beta[4], b=beta[2], col=brandcol[3], lwd=2)
legend("bottomleft", bty="n", lwd=2, col=brandcol, legend=levels(oj$brand))
beta <- coef(reg)
plot(log(sales) ~ log(price), data=oj, col=brandcol[oj$brand],
cex=.1, pch=20, bty="n")
abline(a=beta[1], b=beta[2], col=brandcol[1], lwd=2)
abline(a=beta[1]+beta[3], b=beta[2], col=brandcol[2], lwd=2)
abline(a=beta[1]+beta[4], b=beta[2], col=brandcol[3], lwd=2)
beta <- coef(reg)
brandcol <- c("green","red","gold")
plot(log(sales) ~ log(price), data=oj, col=brandcol[oj$brand],
cex=.1, pch=20, bty="n")
abline(a=beta[1], b=beta[2], col=brandcol[1], lwd=2)
abline(a=beta[1]+beta[3], b=beta[2], col=brandcol[2], lwd=2)
abline(a=beta[1]+beta[4], b=beta[2], col=brandcol[3], lwd=2)
legend("bottomleft", bty="n", lwd=2, col=brandcol, legend=levels(oj$brand))
beta <- coef(reg)
brandcol <- c("green","red","gold")
plot(log(sales) ~ log(price), data=oj, col=brandcol[oj$brand],
cex=.1, pch=20, bty="n")
abline(a=beta[1], b=beta[2], col=brandcol[1], lwd=2)
abline(a=beta[1]+beta[3], b=beta[2], col=brandcol[2], lwd=2)
abline(a=beta[1]+beta[4], b=beta[2], col=brandcol[3], lwd=2)
legend("bottomleft", bty="n", lwd=2, col=brandcol)
levels(oj$brand)
levels(oj$brand)
oj <- read.csv("oj.csv")
levels(oj$brand)
View(oj)
oj$brand <- oj$brand
oj$brand <- factor(oj$brand)
View(oj)
beta <- coef(reg)
brandcol <- c("green","red","gold")
plot(log(sales) ~ log(price), data=oj, col=brandcol[oj$brand],
cex=.1, pch=20, bty="n")
abline(a=beta[1], b=beta[2], col=brandcol[1], lwd=2)
abline(a=beta[1]+beta[3], b=beta[2], col=brandcol[2], lwd=2)
abline(a=beta[1]+beta[4], b=beta[2], col=brandcol[3], lwd=2)
legend("bottomleft", bty="n", lwd=2, col=brandcol, legend=levels(oj$brand))
View(oj)
reg_interact = glm(log(sales) ~ log(price)*brand, data=oj)
coef(reg_interact)
reg_interact = glm(log(sales) ~ log(price)*brand, data=oj)
coef(reg_interact)
beta <- coef(reg_interact)
plot(log(sales) ~ log(price), data=oj, col=brandcol[oj$brand],
cex=.1, pch=20, bty="n")
abline(a=beta[1], b=beta[2], col=brandcol[1], lwd=2)
abline(a=beta[1]+beta[3], b=beta[2]+beta[5], col=brandcol[2], lwd=2)
abline(a=beta[1]+beta[4], b=beta[2]+beta[6], col=brandcol[3], lwd=2)
legend("bottomleft", bty="n", lwd=2, col=brandcol, legend=levels(oj$brand))
ojreg <- glm(log(sales) ~ log(price)*brand*feat, data=oj)
coef(ojreg)
b <- coef(ojreg)
b["log(price)"]
b["log(price)"] + b["log(price):brandminute.maid"]
b["log(price)"] + b["log(price):brandtropicana"]
b["log(price)"] + b["log(price):feat"]
b["log(price)"] + b["log(price):brandminute.maid"] + b["log(price):feat"] + b["log(price):brandminute.maid:feat"]
b["log(price)"] + b["log(price):brandtropicana"] + b["log(price):feat"] + b["log(price):brandtropicana:feat"]
salestable <- tapply(exp(oj$logmove), oj[,c("feat","brand")], sum)
###################################################
############# Orange Juice Regression #############
###################################################
## read in the data
oj <- read.csv("oj.csv")
head(oj)
levels(oj$brand)
## create some colors for the brands
brandcol <- c("green","red","gold")
par(mfrow=c(1,2))
plot(log(price) ~ brand, data=oj, col=brandcol)
plot(log(sales) ~ log(price), data=oj, col=brandcol[oj$brand])
## simple regression
reg = glm(log(sales) ~ log(price) + brand, data=oj)
## use the fitted model
summary(reg) ## coef, tests, fit
coef(reg) ## just coefficients
x <- model.matrix( ~ log(price) + brand, data=oj)
x[c(100,200,300),]
oj[c(100,200,300),]
beta <- coef(reg)
plot(log(sales) ~ log(price), data=oj, col=brandcol[oj$brand],
cex=.1, pch=20, bty="n")
abline(a=beta[1], b=beta[2], col=brandcol[1], lwd=2)
abline(a=beta[1]+beta[3], b=beta[2], col=brandcol[2], lwd=2)
abline(a=beta[1]+beta[4], b=beta[2], col=brandcol[3], lwd=2)
legend("bottomleft", bty="n", lwd=2, col=brandcol, legend=levels(oj$brand))
## Interactions
## note that `*' also adds the main effects automatically
reg_interact = glm(log(sales) ~ log(price)*brand, data=oj)
coef(reg_interact)
## compare brand-specific log(price) slopes to our earlier elasticity (-3.1)
beta <- coef(reg_interact)
plot(log(sales) ~ log(price), data=oj, col=brandcol[oj$brand],
cex=.1, pch=20, bty="n")
abline(a=beta[1], b=beta[2], col=brandcol[1], lwd=2)
abline(a=beta[1]+beta[3], b=beta[2]+beta[5], col=brandcol[2], lwd=2)
abline(a=beta[1]+beta[4], b=beta[2]+beta[6], col=brandcol[3], lwd=2)
legend("bottomleft", bty="n", lwd=2, col=brandcol, legend=levels(oj$brand))
## and finally, consider 3-way interactions
ojreg <- glm(log(sales) ~ log(price)*brand*feat, data=oj)
coef(ojreg)
# log(price)                       -2.77415    0.03883 -71.445  < 2e-16 ***
# feat                              1.09441    0.03810  28.721  < 2e-16 ***
# log(price):brandminute.maid       0.78293    0.06140  12.750  < 2e-16 ***
# log(price):brandtropicana         0.73579    0.05684  12.946  < 2e-16 ***
# log(price):feat                  -0.47055    0.07409  -6.351 2.17e-10 ***
# brandminute.maid:feat             1.17294    0.08196  14.312  < 2e-16 ***
# brandtropicana:feat               0.78525    0.09875   7.952 1.90e-15 ***
# log(price):brandminute.maid:feat -1.10922    0.12225  -9.074  < 2e-16 ***
# log(price):brandtropicana:feat   -0.98614    0.12411  -7.946 2.00e-15 ***
## for the elasticities table
b <- coef(ojreg)
b["log(price)"]
b["log(price)"] + b["log(price):brandminute.maid"]
b["log(price)"] + b["log(price):brandtropicana"]
b["log(price)"] + b["log(price):feat"]
b["log(price)"] + b["log(price):brandminute.maid"] + b["log(price):feat"] + b["log(price):brandminute.maid:feat"]
b["log(price)"] + b["log(price):brandtropicana"] + b["log(price):feat"] + b["log(price):brandtropicana:feat"]
## table explaining why ads confounded our brand elasticity estimates
salestable <- tapply(exp(oj$logmove), oj[,c("feat","brand")], sum)
salestable <- tapply(exp(oj$logmove), oj[,c("feat","brand")], sum)
mosaicplot(salestable,col=brandcol)
tapply(exp(oj$logmove), oj[,c("feat","brand")], sum)
b["log(price)"]
b["log(price):feat"]
b["log(price)"] + b["log(price):feat"]
MinuteMaid <- c(b["log(price)"] + b["log(price):brandminute.maid"],
b["log(price)"] + b["log(price):brandminute.maid"]
+ b["log(price):brandminute.maid:feat"]
)
MinuteMaid
b["log(price)"] + b["log(price):brandminute.maid"]
b["log(price):feat"] + b["log(price):brandminute.maid:feat"]
b["log(price)"] + b["log(price):brandminute.maid"] + b["log(price):feat"] + b["log(price):brandminute.maid:feat"]
MinuteMaid <- c(b["log(price)"] + b["log(price):brandminute.maid"],
b["log(price)"] + b["log(price):brandminute.maid"] + b["log(price):feat"] + b["log(price):brandminute.maid:feat"]
)
MinuteMaid
b["log(price)"] + b["log(price):brandtropicana"] + b["log(price):feat"] + b["log(price):brandtropicana:feat"]
b["log(price):feat"] + b["log(price):brandminute.maid:feat"]
b["log(price)"] + b["log(price):brandminute.maid"] + b["log(price):feat"] + b["log(price):brandminute.maid:feat"]
b["log(price)"]
b["log(price)"] + b["log(price):brandminute.maid"]
b["log(price)"] + b["log(price):brandtropicana"]
Tropicana <- c(b["log(price)"] + b["log(price):brandtropicana"],
b["log(price)"] + b["log(price):brandtropicana"] + b["log(price):feat"] + b["log(price):brandtropicana:feat"])
Tropicana
data.frame(" " = Ad,
"Dominick's" = round(Dominicks,digits = 1),
"Minute Maid" = round(MinuteMaid,digits = 1),
"Tropicana" = round(Tropicana,digits = 1))
Ad <- c("Not Featured","Featured")
Dominicks <- c(b["log(price)"],
b["log(price)"] + b["log(price):feat"])
MinuteMaid <- c(b["log(price)"] + b["log(price):brandminute.maid"],
b["log(price)"] + b["log(price):brandminute.maid"] + b["log(price):feat"] + b["log(price):brandminute.maid:feat"]
)
Tropicana <- c(b["log(price)"] + b["log(price):brandtropicana"],
b["log(price)"] + b["log(price):brandtropicana"] + b["log(price):feat"] + b["log(price):brandtropicana:feat"])
data.frame(" " = Ad,
"Dominick's" = round(Dominicks,digits = 1),
"Minute Maid" = round(MinuteMaid,digits = 1),
"Tropicana" = round(Tropicana,digits = 1))
data.frame("Featured" = Ad,
"Dominick's" = round(Dominicks,digits = 1),
"Minute Maid" = round(MinuteMaid,digits = 1),
"Tropicana" = round(Tropicana,digits = 1))
data.frame("Advertising" = Ad,
"Dominick's" = round(Dominicks,digits = 1),
"Minute Maid" = round(MinuteMaid,digits = 1),
"Tropicana" = round(Tropicana,digits = 1))
salestable <- tapply(exp(oj$logPrice), oj[,c("feat","brand")], sum)
oj$logPrice
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
oj <- read.csv("oj.csv")
head(oj)
oj$brand <- factor(oj$brand)
plot_ly(oj, y = ~price, x = ~sales, type = 'scatter',color = ~brand)
plot_ly(y = oj$price,x= oj$brand, type = 'box', name = 'Height [cm]')
oj$logPrice <- log(oj$price)
oj$logSales <- log(oj$sales)
plot_ly(oj, y = ~logPrice, x = ~logSales, type = 'scatter',color = ~brand)
plot_ly(y = oj$logPrice,x= oj$brand, type = 'box', name = 'Height [cm]')
reg = glm(log(sales) ~ log(price) + brand, data=oj)
summary(reg) ## coef, tests, fit
coef(reg) ## just coefficients
x <- model.matrix( ~ log(price) + brand, data=oj)
x[c(100,200,300),]
oj[c(100,200,300),]
beta <- coef(reg)
brandcol <- c("green","red","gold")
plot(log(sales) ~ log(price), data=oj, col=brandcol[oj$brand],
cex=.1, pch=20, bty="n")
abline(a=beta[1], b=beta[2], col=brandcol[1], lwd=2)
abline(a=beta[1]+beta[3], b=beta[2], col=brandcol[2], lwd=2)
abline(a=beta[1]+beta[4], b=beta[2], col=brandcol[3], lwd=2)
legend("bottomleft", bty="n", lwd=2, col=brandcol, legend=levels(oj$brand))
reg_interact = glm(log(sales) ~ log(price)*brand, data=oj)
coef(reg_interact)
beta <- coef(reg_interact)
plot(log(sales) ~ log(price), data=oj, col=brandcol[oj$brand],
cex=.1, pch=20, bty="n")
abline(a=beta[1], b=beta[2], col=brandcol[1], lwd=2)
abline(a=beta[1]+beta[3], b=beta[2]+beta[5], col=brandcol[2], lwd=2)
abline(a=beta[1]+beta[4], b=beta[2]+beta[6], col=brandcol[3], lwd=2)
legend("bottomleft", bty="n", lwd=2, col=brandcol, legend=levels(oj$brand))
ojreg <- glm(log(sales) ~ log(price)*brand*feat, data=oj)
coef(ojreg)
b <- coef(ojreg)
Ad <- c("Not Featured","Featured")
Dominicks <- c(b["log(price)"],
b["log(price)"] + b["log(price):feat"])
MinuteMaid <- c(b["log(price)"] + b["log(price):brandminute.maid"],
b["log(price)"] + b["log(price):brandminute.maid"] + b["log(price):feat"] + b["log(price):brandminute.maid:feat"]
)
Tropicana <- c(b["log(price)"] + b["log(price):brandtropicana"],
b["log(price)"] + b["log(price):brandtropicana"] + b["log(price):feat"] + b["log(price):brandtropicana:feat"])
data.frame("Advertising" = Ad,
"Dominicks" = round(Dominicks,digits = 1),
"MinuteMaid" = round(MinuteMaid,digits = 1),
"Tropicana" = round(Tropicana,digits = 1))
View(oj)
exp(oj$logPrice)
salestable <- tapply(exp(oj$logPrice), oj[,c("feat","brand")], sum)
mosaicplot(salestable,col=brandcol)
salestable <- tapply(exp(oj$logmove), oj[,c("feat","brand")], sum)
salestable <- tapply(exp(oj$logSales), oj[,c("feat","brand")], sum)
mosaicplot(salestable,col=brandcol)
plot(ojreg$fitted ~ oj$logmove, col=brandcol[oj$brand], bty="n")
plot(ojreg$fitted ~ oj$logSales, col=brandcol[oj$brand], bty="n")
abline(a=0,b=1)#  add a line with slope 1, intercept 0
legend("topleft",legend=levels(oj$brand),fill=brandcol, bty="n")
cor(ojreg$fitted,oj$logmove)^2
plot(ojreg$fitted ~ oj$logSales, col=brandcol[oj$brand], bty="n")
abline(a=0,b=1)#  add a line with slope 1, intercept 0
legend("topleft",legend=levels(oj$brand),fill=brandcol, bty="n")
cor(ojreg$fitted,oj$logSales)^2
cor(ojreg$fitted,oj$logSales)
summary(ojreg)
newdata <- data.frame(price=rep(4,3),
brand=factor(c("tropicana","minute.maid","dominicks"),
levels=levels(oj$brand)))
newdata <- data.frame(price=rep(4,3),
brand=factor(c("tropicana","minute.maid","dominicks"),
levels=levels(oj$brand)))
predict(reg, newdata=newdata)  ## predicted log units moved
exp(predict(reg, newdata=newdata)) ## predicted # of units moved
View(newdata)
brandcol <- c("green","red","gold")
par(mfrow=c(1,2))
plot(log(price) ~ brand, data=oj, col=brandcol)
plot(log(sales) ~ log(price), data=oj, col=brandcol[oj$brand])
